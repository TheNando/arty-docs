{"version":3,"sources":["docs sync /^/.//.*$","../docs/README.md","../docs/index.md","../docs/Extending Arty.md","../docs/Extending Arty/Adding Helix UI.md","../docs/Extending Arty/Async Await Support.md","../docs/Extending Arty/Routing.md","../docs/Patterns/React.md","modules/MarkdownUtils.ts","Nav.tsx","Page.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["map","./Extending Arty.md","./Extending Arty/Adding Helix UI.md","./Extending Arty/Async Await Support.md","./Extending Arty/Routing.md","./Getting Started.md","./Patterns/React.md","./README.md","./index.md","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","rxMdLabel","rxMdLink","rxIsCategory","MarkdownUtils","mdToCategories","md","trim","split","reduce","agg","curr","link","name","test","match","length","items","push","getPageContent","_getPageContent","asyncToGenerator","regenerator_default","a","mark","_callee","category","page","converter","content","wrap","_context","prev","next","showdown","Converter","require","concat","fetch","then","response","text","__html","makeHtml","abrupt","sent","t0","stop","this","_x","_x2","apply","arguments","Nav","state","categories","isUrl","url","item","undefined","_this2","setState","props","location","pathname","react_default","createElement","className","Fragment","key","NavLink","isActive","to","Component","withRouter","Page","setContent","prevProps","params","role","dangerouslySetInnerHTML","App","HashRouter","src_Nav","Route","exact","path","component","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b9c1bc1.chunk.js","sourcesContent":["var map = {\n\t\"./Extending Arty.md\": 36,\n\t\"./Extending Arty/Adding Helix UI.md\": 37,\n\t\"./Extending Arty/Async Await Support.md\": 38,\n\t\"./Extending Arty/Routing.md\": 39,\n\t\"./Getting Started.md\": 17,\n\t\"./Patterns/React.md\": 40,\n\t\"./README.md\": 17,\n\t\"./index.md\": 18\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/README.3979420d.md\";","module.exports = __webpack_public_path__ + \"static/media/index.bef0c05d.md\";","module.exports = __webpack_public_path__ + \"static/media/Extending Arty.d4f6fa52.md\";","module.exports = __webpack_public_path__ + \"static/media/Adding Helix UI.1fdc6f3d.md\";","module.exports = __webpack_public_path__ + \"static/media/Async Await Support.3287c874.md\";","module.exports = __webpack_public_path__ + \"static/media/Routing.e71f2c40.md\";","module.exports = __webpack_public_path__ + \"static/media/React.98dc7e51.md\";","import showdown from \"showdown\";\nimport { NavCategory } from \"../Nav\";\n\n// Capture all text within parens\nconst rxMdLabel = /\\[(.*)\\]/;\n\n// Capture all text within square braces\nconst rxMdLink = /\\((.*)\\)/;\n\nconst rxIsCategory = /^- \\[/;\n// const rxIsDoc = /^  - \\[/\n\nconst MarkdownUtils = {\n  /** Generate Nav menu from markdown text. Expects a 2 level deep md list */\n  mdToCategories: (md: string) =>\n    md\n      .trim()\n      .split(\"\\n\")\n      .reduce((agg: Array<NavCategory>, curr: string) => {\n        let link;\n        let name;\n        if (rxIsCategory.test(curr)) {\n          name = curr.match(rxMdLabel) || [];\n          name = name[1] || \"\";\n          link = curr.match(rxMdLink) || [];\n          link = \"/\" + link[1];\n          agg[agg.length] = { name, link, items: [] };\n        } else {\n          name = curr.match(rxMdLabel) || [];\n          name = name[1] || \"\";\n          link = curr.match(rxMdLink) || [];\n          link = \"/\" + link[1];\n          agg[agg.length - 1].items.push({ name, link });\n        }\n        return agg;\n      }, []),\n\n  /** Retrieve md content from docs by given category and page */\n  getPageContent: async (category: string, page: string) => {\n    const converter = new showdown.Converter();\n    try {\n      const content = category\n        ? require(`../docs/${category}/${page}`)\n        : require(`../docs/${page}`);\n\n      return await fetch(content)\n        .then(response => response.text())\n        .then(text => ({ content: { __html: converter.makeHtml(text) } }));\n    } catch (error) {\n      return {\n        content: {\n          __html: `\n            <h1 class=\"error-number\">404</h1>\n            <h2 class=\"error-msg\">\n              No file found at path\n              <strong>${category ? category + \"/\" : \"\"}${page}</strong>\n            </h2>\n          `\n        }\n      };\n    }\n  }\n};\n\nexport default MarkdownUtils;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport { RouteProps } from \"./Page\";\nimport MarkdownUtils from \"./modules/MarkdownUtils\";\n\nexport interface NavItem {\n  name: string;\n  link: string;\n}\n\nexport interface NavCategory {\n  name: string;\n  items: Array<NavItem>;\n  link: string;\n}\n\nclass Nav extends Component<RouteProps> {\n  state = {\n    categories: []\n  };\n\n  componentDidMount() {\n    fetch(require(\"./docs/index.md\"))\n      .then(response => response.text())\n      .then(text => {\n        const categories = MarkdownUtils.mdToCategories(text);\n        this.setState({ categories });\n      });\n  }\n\n  isUrl = (url: string, category: string, item: string = \"\") =>\n    url === `/${category}${item ? \"/\" + item : \"\"}.md`;\n\n  render() {\n    const { isUrl } = this;\n    const { categories } = this.state;\n    const url = this.props.location.pathname;\n\n    return (\n      <nav id=\"nav\" className=\"hxNav\">\n        <div className=\"nav-title\">Arty</div>\n\n        <div className=\"nav-subtitle\">A React/Typescript Stack</div>\n\n        {categories.map((category: NavCategory) => (\n          <React.Fragment key={category.name}>\n            {/* Render the Nav Category */}\n            <NavLink\n              className=\"nav-category\"\n              isActive={e => isUrl(url, category.name)}\n              to={category.link}\n            >\n              {category.name}\n            </NavLink>\n\n            {/* Render Nav Category's Nav Items */}\n            {category.items.map((item: NavItem) => (\n              <NavLink\n                key={item.name}\n                className=\"nav-item\"\n                isActive={e => isUrl(url, category.name, item.name)}\n                to={item.link}\n              >\n                {item.name}\n              </NavLink>\n            ))}\n          </React.Fragment>\n        ))}\n      </nav>\n    );\n  }\n}\n\nexport default withRouter(Nav);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\nimport MarkdownUtils from \"./modules/MarkdownUtils\";\n\nexport interface RouteParamProps {\n  category: string;\n  page: string;\n}\n\nexport interface RouteProps extends RouteComponentProps<RouteParamProps> {}\n\ninterface State {\n  content: Object;\n}\n\nclass Page extends Component<RouteProps, State> {\n  state = {\n    content: { __html: \"\" }\n  };\n\n  // Set content on initial call only\n  componentWillMount() {\n    this.setContent();\n  }\n\n  // Set content on route changes only\n  componentDidUpdate(prevProps: RouteProps) {\n    if (this.props.location !== prevProps.location) {\n      this.setContent();\n    }\n  }\n\n  async setContent() {\n    const { category, page } = this.props.match.params;\n    const content = await MarkdownUtils.getPageContent(category, page);\n    this.setState(content);\n  }\n\n  render() {\n    const { content } = this.state;\n    return (\n      <main\n        role=\"main\"\n        id=\"content\"\n        className=\"hxBox hxLg markdown\"\n        dangerouslySetInnerHTML={content}\n      />\n    );\n  }\n}\n\nexport default withRouter(Page);\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Nav from \"./Nav\";\nimport Page from \"./Page\";\nimport logo from \"./logo.svg\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div id=\"stage\">\n          <Nav />\n          <Route exact path=\"/:category?/:page\" component={Page} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Helix Css\nimport \"helix-ui/dist/styles/helix-ui.min.css\";\n\n// Converts ES5 custom element constructor functions to ES6 classes -->\nimport \"@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js\";\n\n// loader appends polyfills, if needed -->\nimport \"@webcomponents/webcomponentsjs/webcomponents-loader.js\";\n\n// Helix UI client library\nimport \"helix-ui/dist/scripts/helix-ui\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}